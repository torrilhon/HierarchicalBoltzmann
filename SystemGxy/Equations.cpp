/*************************************************************************\
 Equations.cpp  - equation system matrices for hierarchical Boltzmann 
                  discretizations, including boundary conditions.
\*************************************************************************/
#include <stdio.h>
#include <iostream>
#include <math.h>
using namespace std;

#include "EigenSetup.h"
#include <Eigen/Eigenvalues>
#include "Mesh.h"
#include "System.h"
#include "Tools.h"

// sets the matrices for the equations and boundary conditions 
// 'numMoments' is the total number of 3D fields
// negative 'numMoments' indicates regularized theory
void System::setEQNData( int numMoments )
{
  VectorXi Ai, Aj, Pi, Pj, BCi, BCj;
  MatrixXd Aval, Pval, BCval;
  
  switch( numMoments ) {
  case( -5 ): 
  // NSF: rho, (vx, vy), theta, (sigma_xx, sigma_xy, sigma_yy), (qx, qy)
    nEqn = 9;
    nBC = 3;

    Ai.resize(11);
    Aj.resize(11);
    Aval.resize(11,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,3;
    Aj << 0,1,1,3,1,4,2,5,1,3,7;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,1;
    
    Pi.resize(5);
    Pj.resize(5);
    Pval.resize(5,1);
    Pi << 4,5,6,7,8;
    Pj << 4,5,6,7,8;
    Pval << 1,1,1,0.6666666666666666,0.6666666666666666;

    BCi.resize(8);
    BCj.resize(8);
    BCval.resize(8,1);
    BCi << 0,0,1,2,0,0,1,2;
    BCj << 0,1,2,3,3,4,5,7;
    BCval << -1,1,-1,-1.3333333333333333,0.6666666666666666,-1,1,1;

    OddVar.resize(nBC);
    OddVar << 1,5,7; 
    TensorDegree.resize(5);
    TensorDegree << 0,1,0,2,1; 
    break;
  case( 13 ): 
  // Grad13: rho, (vx, vy), theta, (sigma_xx, sigma_xy, sigma_yy), (qx, qy)
    nEqn = 9;
    nBC = 3;

    Ai.resize(16);
    Aj.resize(16);
    Aval.resize(16,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,
           -0.5333333333333333,1,-1,-0.4;
    
    Pi.resize(5);
    Pj.resize(5);
    Pval.resize(5,1);
    Pi << 4,5,6,7,8;
    Pj << 4,5,6,7,8;
    Pval << 1,1,1,0.6666666666666666,0.6666666666666666;

    BCi.resize(10);
    BCj.resize(10);
    BCval.resize(10,1);
    BCi << 0,0,1,2,0,2,0,1,2,1;
    BCj << 0,1,2,3,3,4,4,5,7,8;
    BCval << -1,1,-1,-1.3333333333333333,0.6666666666666666,0.8,-1,1,1,0.4;

    OddVar.resize(nBC);
    OddVar << 1,5,7; 
    TensorDegree.resize(5);
    TensorDegree << 0,1,0,2,1; 
    break;
  case( 20 ): 
  // Grad20: rho, (vx, vy), theta, (sigma_xx, sigma_xy, sigma_yy), (qx, qy), (mxxx, mxxy, mxyy, myyy)
    nEqn = 13;
    nBC = 5;

    Ai.resize(24);
    Aj.resize(24);
    Aval.resize(24,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,
    -0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,-1.2;
    
    Pi.resize(9);
    Pj.resize(9);
    Pval.resize(9,1);
    Pi << 4,5,6,7,8,9,10,11,12;
    Pj << 4,5,6,7,8,9,10,11,12;
    Pval << 1,1,1,0.6666666666666666,0.6666666666666666,1.5,1.5,1.5,1.5;

    BCi.resize(17);
    BCj.resize(17);
    BCval.resize(17,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,1,4,2,1,3,1,4;
    BCj << 0,1,2,3,3,3,4,3,4,4,5,6,7,8,9,10,11;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,1,-1,1,0.4,1,-1,1;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11; 
    TensorDegree.resize(6);
    TensorDegree << 0,1,0,2,1,3; 
    break;
  case( -13 ): 
  // R13: rho, (vx, vy), theta, (sigma_xx, sigma_xy, sigma_yy), (qx, qy), (mxxx, mxxy, mxyy, myyy), delta, (Rxx, Rxy, Ryy)
    nEqn = 17;
    nBC = 6;

    Ai.resize(31);
    Aj.resize(31);
    Aval.resize(31,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12,13,7,14,7,15,8,16;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5,7,13,7,14,8,15,7;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,-0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,
    -1.2,-2,-0.6666666666666666,1.8666666666666667,1,1.4,1,-0.9333333333333333;
    
    Pi.resize(13);
    Pj.resize(13);
    Pval.resize(13,1);
    Pi << 4,5,6,7,8,9,10,11,12,13,14,15,16;
    Pj << 4,5,6,7,8,9,10,11,12,13,14,15,16;
    Pval << 1,1,1,0.6666666666666666,0.6666666666666666,1.5,1.5,1.5,1.5,0.6666666666666666,1.1666666666666667,1.1666666666666667,1.1666666666666667;

    BCi.resize(28);
    BCj.resize(28);
    BCval.resize(28,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,0,5,1,4,2,5,1,3,5,1,4,4,3,2,4,3,2,5;
    BCj << 0,1,2,3,3,3,4,3,4,4,4,2,5,6,7,8,8,9,10,10,11,13,13,13,14,14,14,15;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,-1,-0.5,1,-1,1,-1.1,0.2,1,-0.5,-1,1,-0.05333333333333334,
    0.10666666666666667,0.5333333333333333,0.08,-0.16,-0.8,1;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11,15; 
    TensorDegree.resize(8);
    TensorDegree << 0,1,0,2,1,3,0,2; 
    break;
  case( 26 ): 
  // Grad26: rho, (vx, vy), theta, (sigma_xx, sigma_xy, sigma_yy), (qx, qy), (mxxx, mxxy, mxyy, myyy), delta, (Rxx, Rxy, Ryy)
    nEqn = 17;
    nBC = 6;

    Ai.resize(39); Aj.resize(39); Aval.resize(39,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12,13,7,14,14,11,9,7,15,15,12,10,8,16,16,11;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5,7,13,7,9,14,14,14,8,10,15,15,15,11,7,16;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,-0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,-1.2,-2,-0.6666666666666666,1.8666666666666667,-1,0.11428571428571428,-0.5142857142857142,1,1.4,-1,0.34285714285714286,-0.45714285714285713,1,-1,-0.9333333333333333,-0.2857142857142857;
    
    Pi.resize(13); Pj.resize(13); Pval.resize(13,1);
    Pi << 4,5,6,7,8,9,10,11,12,13,14,15,16;
    Pj << 4,5,6,7,8,9,10,11,12,13,14,15,16;
    Pval << 1,1,1,0.6666666666666666,0.6666666666666666,1.5,1.5,1.5,1.5,0.6666666666666666,1.1666666666666667,1.1666666666666667,1.1666666666666667;

    BCi.resize(28); BCj.resize(28); BCval.resize(28,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,0,5,1,4,2,5,1,3, 5, 1, 4, 4, 3, 2, 3, 2, 5, 4;
    BCj << 0,1,2,3,3,3,4,3,4,4,4,2,5,6,7,8,8,9,10,10,11,13,13,13,14,14,15,16;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,-1,-0.5,1,-1,1,-1.1,0.2,1,0.42857142857142855,-0.8571428571428571,1,-0.05333333333333334,0.10666666666666667,0.5333333333333333,0.2857142857142857,-0.7142857142857143,1,0.2857142857142857;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11,15;
    TensorDegree.resize(8);
    TensorDegree << 0,1,0,2,1,3,0,2; 
    break;
  case( 35 ):  // Grad35
    nEqn = 22;
    nBC = 8;

    Ai.resize(50); Aj.resize(50); Aval.resize(50,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12,13,7,14,14,11,9,7,15,15,12,10,8,16,16,11,17,9,18,10,19,19,11,20,20,12,21;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5,7,13,7,9,14,14,14,8,10,15,15,15,11,7,16,9,17,10,18,11,9,19,12,10,20,11;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,-0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,-1.2,-2,-0.6666666666666666,1.8666666666666667,-1,0.11428571428571428,-0.5142857142857142,1,1.4,-1,0.34285714285714286,-0.45714285714285713,1,-1,-0.9333333333333333,-0.2857142857142857,2.2857142857142856,1,2.142857142857143,1,1.7142857142857142,-0.2857142857142857,1,1,-0.8571428571428571,1,-1.7142857142857142;
    
    Pi.resize(18); Pj.resize(18); Pval.resize(18,1);
    Pi << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21;
    Pj << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21;
    Pval << 1.,1.,1.,0.6666666666666667,0.6666666666666667,1.5,1.5,1.5,1.5,0.6666666666666667,1.1666666666666667,1.1666666666666667,1.1666666666666667,1.8731315588479967,1.8731315588479967,1.8731315588479967,1.8731315588479967,1.8731315588479967;

    BCi.resize(41); BCj.resize(41); BCval.resize(41,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,0,5,1,6,4,7,2,7,6,5,1,3,7,6,5,1,4,7,4,3,2,3,2,5,4,4,3,2,6,4,7;
    BCj << 0,1,2,3,3,3,4,3,4,4,4,2,5,2,6,2,7,8,8,8,8,9,10,10,10,10,11,12,13,13,13,14,14,15,16,17,17,17,18,19,20;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,-1,-0.5,1,0.5714285714285714,-1,-0.42857142857142855,1,0.2571428571428571,-0.34285714285714286,-1.1,0.2,1,0.21428571428571427,-1.2857142857142858,0.25,-0.5,1,-1,-0.05333333333333334,0.10666666666666667,0.5333333333333333,0.2857142857142857,-0.7142857142857143,1,0.2857142857142857,-0.06666666666666667,-0.8666666666666667,-0.16666666666666666,1,-1,1;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11,15,18,20;
    TensorDegree.resize(9);
    TensorDegree << 0,1,0,2,1,3,0,2,4; 
    break;
  case( 45 ): 
    nEqn = 28;
    nBC = 11;

    Ai.resize(76); Aj.resize(76); Aval.resize(76,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12,13,7,14,14,11,9,7,15,15,12,10,8,16,16,11,17,9,18,10,19,19,11,20,20,12,21,22,22,16,14,13,23,15,24,24,19,17,14,25,25,20,18,15,26,26,26,21,19,16,27,27,20;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5,7,13,7,9,14,14,14,8,10,15,15,15,11,7,16,9,17,10,18,11,9,19,12,10,20,11,13,14,22,22,22,15,23,14,17,24,24,24,15,18,25,25,25,16,14,19,26,26,26,20,15,27;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,-0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,-1.2,-2,-0.6666666666666666,1.8666666666666667,-1,0.11428571428571428,-0.5142857142857142,1,1.4,-1,0.34285714285714286,-0.45714285714285713,1,-1,-0.9333333333333333,-0.2857142857142857,2.2857142857142856,1,2.142857142857143,1,1.7142857142857142,-0.2857142857142857,1,1,-0.8571428571428571,1,-1.7142857142857142,2.3333333333333335,-2,0.26666666666666666,-0.5333333333333333,1,-2,-0.4,2.3142857142857145,-1,0.06349206349206349, -0.5079365079365079,1,2.057142857142857,-1,0.19047619047619047,-0.47619047619047616,1,1.2857142857142858,-0.5142857142857142,-1,0.38095238095238093,-0.38095238095238093,1,-1,-1.542857142857143,-0.2222222222222222;
    
    Pi.resize(24); Pj.resize(24); Pval.resize(24,1);
    Pi << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27;
    Pj << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27;
    Pval << 1.,1.,1.,0.6666666666666667,0.6666666666666667,1.5,1.5,1.5,1.5,0.6666666666666667,1.1666666666666667,1.1666666666666667,1.1666666666666667,1.8731315588479967,1.8731315588479967,1.8731315588479967,1.8731315588479967,1.8731315588479967,1.,1.,1.5703608907702838,1.5703608907702838,1.5703608907702838,1.5703608907702838;

    BCi.resize(70); BCj.resize(70); BCval.resize(70,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,0,5,1,6,4,7,2,8,8,7,6,5,1,9,9,3,10,10,10,7,6,5,1,4,7,10,9,8,4,3,2,10,9,8,3,2,5,10,4,10,9,4,3,2,6,10,4,7,8,7,6,5,1,9,7,6,5,1,10,7;
    BCj << 0,1,2,3,3,3,4,3,4,4,4,2,5,2,6,2,7,4,3,8,8,8,8,4,3,9,6,4,3,10,10,10,10,11,12,13,13,13,13,13,13,14,14,14,14,14,15,16,16,17,17,17,17,17,18,19,19,20,22,23,23,23,23,24,25,25,25,25,26,27;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,-1,-0.5,1,0.5714285714285714,-1,-0.42857142857142855,1,0.5,-1.3333333333333333,0.2571428571428571,-0.34285714285714286,-1.1,0.2,-0.9,0.4,1,-0.5,0.2,-0.2,0.21428571428571427,-1.2857142857142858,0.25,-0.5,1,-1,0.2,-0.4,-1.3333333333333333,-0.02666666666666667,0.05333333333333334,0.26666666666666666,0.12857142857142856,-1.3285714285714285,0.5,0.14285714285714285,-0.35714285714285715,1,-1.0714285714285714,0.14285714285714285,-0.018518518518518517,0.48148148148148145,-0.05185185185185185,-0.7851851851851852,-0.2222222222222222,1,0.4444444444444444,-0.8888888888888888,1,1,-0.024489795918367346,0.0326530612244898,0.37142857142857144,0.05714285714285714,1,-0.09523809523809523,0.3492063492063492,-0.8888888888888888,-0.2222222222222222,1,0.2222222222222222;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11,15,18,20,22,24,26;
    TensorDegree.resize(11);
    TensorDegree << 0,1,0,2,1,3,0,2,4,1,3; 
    break;
  case( 56 ): // Grad56
    nEqn = 34;
    nBC = 14;

    Ai.resize(90); Aj.resize(90); Aval.resize(90,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12,13,7,14,14,11,9,7,15,15,12,10,8,16,16,11,17,9,18,10,19,19,11,20,20,12,21,22,22,16,14,13,23,15,24,24,19,17,14,25,25,20,18,15,26,26,26,21,19,16,27,27,20,28,17,29,18,30,30,19,31,31,20,32,32,21,33;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5,7,13,7,9,14,14,14,8,10,15,15,15,11,7,16,9,17,10,18,11,9,19,12,10,20,11,13,14,22,22,22,15,23,14,17,24,24,24,15,18,25,25,25,16,14,19,26,26,26,20,15,27,17,28,18,29,19,17,30,20,18,31,21,19,32,20;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,-0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,-1.2,-2,-0.6666666666666666,1.8666666666666667,-1,0.11428571428571428,-0.5142857142857142,1,1.4,-1,0.34285714285714286,-0.45714285714285713,1,-1,-0.9333333333333333,-0.2857142857142857,2.2857142857142856,1,2.142857142857143,1,1.7142857142857142,-0.2857142857142857,1,1,-0.8571428571428571,1,-1.7142857142857142,2.3333333333333335,-2,0.26666666666666666,-0.5333333333333333,1,-2,-0.4,2.3142857142857145,-1,0.06349206349206349,-0.5079365079365079,1,2.057142857142857,-1,0.19047619047619047,-0.47619047619047616,1,1.2857142857142858,-0.5142857142857142,-1,0.38095238095238093,-0.38095238095238093,1,-1,-1.542857142857143,-0.2222222222222222,2.7777777777777777,1,2.6666666666666665,1,2.3333333333333335,-0.2222222222222222,1,1.7777777777777777,-0.6666666666666666,1,1,-1.3333333333333333,1,-2.2222222222222223;
    
    Pi.resize(30); Pj.resize(30); Pval.resize(30,1);
    Pi << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33;
    Pj << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33;
    Pval << 1.,1.,1.,0.6666666666666667,0.6666666666666667,1.5,1.5,1.5,1.5,0.6666666666666667,1.166666666666667,1.166666666666667,1.166666666666667,1.873131558847997,1.873131558847997,1.873131558847997,1.873131558847997,1.873131558847997,1.,1.,1.570360890770284,1.570360890770284,1.570360890770284,1.570360890770284,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992;

    BCi.resize(96); BCj.resize(96); BCval.resize(96,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,5,1,6,4,7,2,8,8,7,6,5,1,9,9,3,10,10,10,7,6,5,1,11,11,4,12,12,12,7,13,13,13,13,12,11,10,9,8,4,3,2,12,11,10,9,8,3,2,5,13,12,10,4,12,11,9,4,3,2,6,13,12,10,4,7,13,8,7,6,5,1,9,7,6,5,1,10,7,11,7,6,5,1,12,7,13;
    BCj << 0,1,2,3,3,3,4,3,4,4,2,5,2,6,2,7,4,3,8,8,8,8,4,3,9,6,4,3,10,10,10,10,4,3,11,6,4,3,12,13,6,4,3,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,16,16,16,16,17,17,17,17,17,17,18,19,19,19,19,20,21,22,23,23,23,23,24,25,25,25,25,26,27,28,29,29,29,29,30,31,32;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,-0.5,1,0.5714285714285714,-1,-0.42857142857142855,1,0.5,-1.3333333333333333,0.2571428571428571,-0.34285714285714286,-1.1,0.2,-0.9,0.4,1,-0.5,0.2,-0.2,0.21428571428571427,-1.2857142857142858,0.25,-0.5,1.1428571428571428,0.5079365079365079,1,0.6666666666666666,-0.23809523809523808,-0.25396825396825395,-1,-0.0761904761904762,-0.6666666666666666,0.09523809523809523,0.19047619047619047,0.10158730158730159,-0.20317460317460317,0.2,-0.4,-1.3333333333333333,-0.02666666666666667,0.05333333333333334,0.26666666666666666,0.047619047619047616,-0.38095238095238093,0.12857142857142856,-1.3285714285714285,0.5,0.14285714285714285,-0.35714285714285715,1,0.2857142857142857,-0.2857142857142857,-1.0714285714285714,0.14285714285714285,0.05555555555555555,-1.4444444444444444,0.25,-0.03333333333333333,-0.43333333333333335,-0.08333333333333333,1,0.3333333333333333,-1.3333333333333333,0.25,-0.5,1,-1,1,-0.024489795918367346,0.0326530612244898,0.37142857142857144,0.05714285714285714,1,-0.09523809523809523,0.3492063492063492,-0.8888888888888888,-0.2222222222222222,1,0.2222222222222222,1,-0.07142857142857142,-0.9047619047619048,-0.08333333333333333,0.16666666666666666,1,-1,1;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11,15,18,20,22,24,26,28,30,32;
    TensorDegree.resize(12);
    TensorDegree << 0,1,0,2,1,3,0,2,4,1,3,5; 
    break;
  case( 84 ): // Grad84
    nEqn = 50;
    nBC = 20;

    Ai.resize(147); Aj.resize(147); Aval.resize(147,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12,13,7,14,14,11,9,7,15,15,12,10,8,16,16,11,17,9,18,10,19,19,11,20,20,12,21,22,22,16,14,13,23,15,24,24,19,17,14,25,25,20,18,15,26,26,26,21,19,16,27,27,20,28,17,29,18,30,30,19,31,31,20,32,32,21,33,34,22,35,35,26,24,22,36,36,27,25,23,37,37,26,38,38,30,28,24,39,39,31,29,25,40,40,40,32,30,26,41,41,41,33,31,27,42,42,32,43,28,44,29,45,45,30,46,46,31,47,47,32,48,48,33,49;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5,7,13,7,9,14,14,14,8,10,15,15,15,11,7,16,9,17,10,18,11,9,19,12,10,20,11,13,14,22,22,22,15,23,14,17,24,24,24,15,18,25,25,25,16,14,19,26,26,26,20,15,27,17,28,18,29,19,17,30,20,18,31,21,19,32,20,22,34,22,24,35,35,35,23,25,36,36,36,26,22,37,24,28,38,38,38,25,29,39,39,39,26,24,30,40,40,40,27,25,31,41,41,41,32,26,42,28,43,29,44,30,28,45,31,29,46,32,30,47,33,31,48,32;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,-0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,-1.2,-2,-0.6666666666666666,1.8666666666666667,-1,0.11428571428571428,-0.5142857142857142,1,1.4,-1,0.34285714285714286,-0.45714285714285713,1,-1,-0.9333333333333333,-0.2857142857142857,2.2857142857142856,1,2.142857142857143,1,1.7142857142857142,-0.2857142857142857,1,1,-0.8571428571428571,1,-1.7142857142857142,2.3333333333333335,-2,0.26666666666666666,-0.5333333333333333,1,-2,-0.4,2.3142857142857145,-1,0.06349206349206349,-0.5079365079365079,1,2.057142857142857,-1,0.19047619047619047,-0.47619047619047616,1,1.2857142857142858,-0.5142857142857142,-1,0.38095238095238093,-0.38095238095238093,1,-1,-1.542857142857143,-0.2222222222222222,2.7777777777777777,1,2.6666666666666665,1,2.3333333333333335,-0.2222222222222222,1,1.7777777777777777,-0.6666666666666666,1,1,-1.3333333333333333,1,-2.2222222222222223,-3,-0.6666666666666666,2.4,-2,0.11428571428571428,-0.5142857142857142,1,1.8,-2,0.34285714285714286,-0.45714285714285713,1,-2,-1.2,-0.2857142857142857,2.7936507936507935,-1,0.04040404040404041,-0.5050505050505051,1,2.619047619047619,-1,0.12121212121212122,-0.48484848484848486,1,2.0952380952380953,-0.3492063492063492,-1,0.24242424242424243,-0.42424242424242425,1,1.2222222222222223,-1.0476190476190477,-1,0.40404040404040403,-0.32323232323232326,1,-1,-2.0952380952380953,-0.18181818181818182,3.272727272727273,1,3.1818181818181817,1,2.909090909090909,-0.18181818181818182,1,2.4545454545454546,-0.5454545454545454,1,1.8181818181818181,-1.0909090909090908,1,1,-1.8181818181818181,1,-2.727272727272727;
    
    Pi.resize(46); Pj.resize(46); Pval.resize(46,1);
    Pi << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49;
    Pj << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49;
    Pval << 1.,1.,1.,0.666666666666667,0.666666666666667,1.5,1.5,1.5,1.5,0.666666666666667,1.166666666666667,1.166666666666667,1.166666666666667,1.873131558847997,1.873131558847997,1.873131558847997,1.873131558847997,1.873131558847997,1.,1.,1.570360890770284,1.570360890770284,1.570360890770284,1.570360890770284,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,1.,1.34221653446217,1.34221653446217,1.34221653446217,1.910620894297899,1.910620894297899,1.910620894297899,1.910620894297899,1.910620894297899,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916;

    BCi.resize(193); BCj.resize(193); BCval.resize(193,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,0,5,1,6,4,7,2,8,8,7,6,5,1,9,9,3,10,10,10,7,6,5,1,11,11,4,12,12,12,7,13,13,13,13,12,11,10,9,8,4,3,2,14,14,14,12,11,10,9,8,3,2,15,15,15,5,16,16,16,16,13,12,10,4,17,17,17,12,11,9,4,3,2,18,18,18,18,6,19,19,19,19,13,12,10,4,7,13,8,19,18,17,16,15,14,7,6,5,1,9,19,18,17,16,15,14,7,6,5,1,10,19,18,16,7,11,19,18,17,16,15,14,7,6,5,1,12,19,18,16,7,13,19,10,9,8,4,3,2,13,12,11,10,9,8,4,3,2,14,13,12,10,4,13,12,11,10,9,8,4,3,2,15,13,12,10,4,16,13,12,11,9,4,3,2,17,13,12,10,4,18,13,19;
    BCj << 0,1,2,3,3,3,4,3,4,4,4,2,5,2,6,2,7,4,3,8,8,8,8,4,3,9,6,4,3,10,10,10,10,4,3,11,6,4,3,12,13,6,4,3,13,13,13,13,13,13,13,13,10,8,2,14,14,14,14,14,14,14,10,8,2,15,12,10,8,2,16,16,16,16,10,8,2,17,17,17,17,17,17,12,10,8,2,18,12,10,8,2,19,19,19,19,20,21,22,23,23,23,23,23,23,23,23,23,23,24,25,25,25,25,25,25,25,25,25,25,26,27,27,27,27,28,29,29,29,29,29,29,29,29,29,29,30,31,31,31,31,32,33,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,37,37,37,37,38,38,38,38,38,38,38,38,38,39,40,40,40,40,41,42,43,43,43,43,43,43,44,45,45,45,45,46,47,48;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,-1,-0.5,1,0.5714285714285714,-1,-0.42857142857142855,1,0.5,-1.3333333333333333,0.2571428571428571,-0.34285714285714286,-1.1,0.2,-0.9,0.4,1,-0.5,0.2,-0.2,0.21428571428571427,-1.2857142857142858,0.25,-0.5,1.1428571428571428,0.5079365079365079,1,0.6666666666666666,-0.23809523809523808,-0.25396825396825395,-1,-0.0761904761904762,-0.6666666666666666,0.09523809523809523,0.19047619047619047,0.10158730158730159,-0.20317460317460317,0.2,-0.4,-1.3333333333333333,-0.02666666666666667,0.05333333333333334,0.26666666666666666,0.125,-1.05,-0.75,0.047619047619047616,-0.38095238095238093,0.12857142857142856,-1.3285714285714285,0.5,0.14285714285714285,-0.35714285714285715,-0.6428571428571429,0.4,0.8571428571428571,1,-0.5,0.10714285714285714,-0.3,-0.6428571428571429,0.2857142857142857,-0.2857142857142857,-1.0714285714285714,0.14285714285714285,1.2121212121212122,0.7272727272727273,-0.7272727272727273,0.05555555555555555,-1.4444444444444444,0.25,-0.03333333333333333,-0.43333333333333335,-0.08333333333333333,0.7272727272727273,-0.36363636363636365,-0.5454545454545454,0.5454545454545454,1,-0.9090909090909091,0.07575757575757576,0.45454545454545453,-0.45454545454545453,0.3333333333333333,-1.3333333333333333,0.25,-0.5,1,-1,1,-0.09740259740259741,0.11688311688311688,-0.15584415584415584,0.26632653061224487,-0.3551020408163265,-1.1892857142857143,-0.018367346938775512,0.024489795918367346,0.17857142857142858,0.014285714285714285,1,-0.025252525252525252,0.12121212121212122,-0.40404040404040403,0.2261904761904762,-1.3571428571428572,0.4583333333333333,-0.023809523809523808,0.14285714285714285,-0.4166666666666667,-0.05555555555555555,1,0.30303030303030304,-0.24242424242424243,-1.0555555555555556,0.1111111111111111,1,0.01893939393939394,0.11363636363636363,-1.5151515151515151,0.026785714285714284,0.21428571428571427,0.03125,-0.05357142857142857,-0.42857142857142855,-0.0625,0.041666666666666664,1,0.45454545454545453,-1.3636363636363635,0.25,-0.5,1,-1,-0.03428571428571429,0.06857142857142857,0.5333333333333333,-0.007619047619047619,0.015238095238095238,0.0761904761904762,0.012093726379440665,-0.019652305366591082,0.06046863189720333,-0.031746031746031744,0.3333333333333333,-0.7142857142857143,0.006349206349206349,0.01904761904761905,-0.14285714285714285,1,-0.021164021164021163,0.021164021164021163,0.2698412698412698,0.031746031746031744,-0.011544011544011544,-0.00481000481000481,0.3126503126503126,-0.051515151515151514,-0.806060606060606,-0.16666666666666666,-0.01818181818181818,-0.14545454545454545,0.030303030303030304,1,-0.12121212121212122,0.30303030303030304,-0.9090909090909091,-0.18181818181818182,1,0.18181818181818182,-0.018518518518518517,-0.8518518518518519,-0.08333333333333333,0.02,0.12666666666666668,0.05,1,-0.1111111111111111,-0.8888888888888888,-0.08333333333333333,0.16666666666666666,1,-1,1;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11,15,18,20,22,24,26,28,30,32,36,39,41,44,46,48;
    TensorDegree.resize(16);
    TensorDegree << 0,1,0,2,1,3,0,2,4,1,3,5,0,2,4,6; 
    break;
  case( 120 ):  // Grad120
    nEqn = 70;
    nBC = 30;

    Ai.resize(224); Aj.resize(224); Aval.resize(224,1);
    Ai << 1,0,3,1,4,1,5,2,6,7,7,6,4,3,8,5,9,4,10,5,11,11,6,12,13,7,14,14,11,9,7,15,15,12,10,8,16,16,11,17,9,18,10,19,19,11,20,20,12,21,22,22,16,14,13,23,15,24,24,19,17,14,25,25,20,18,15,26,26,26,21,19,16,27,27,20,28,17,29,18,30,30,19,31,31,20,32,32,21,33,34,22,35,35,26,24,22,36,36,27,25,23,37,37,26,38,38,30,28,24,39,39,31,29,25,40,40,40,32,30,26,41,41,41,33,31,27,42,42,32,43,28,44,29,45,45,30,46,46,31,47,47,32,48,48,33,49,50,50,37,35,34,51,36,52,52,40,38,35,53,53,41,39,36,54,54,54,42,40,37,55,55,41,56,56,45,43,38,57,57,46,44,39,58,58,58,47,45,40,59,59,59,48,46,41,60,60,60,49,47,42,61,61,48,62,43,63,44,64,64,45,65,65,46,66,66,47,67,67,48,68,68,49,69;
    Aj << 0,1,1,3,1,4,2,5,1,3,4,7,7,7,5,8,4,9,5,10,6,4,11,5,7,13,7,9,14,14,14,8,10,15,15,15,11,7,16,9,17,10,18,11,9,19,12,10,20,11,13,14,22,22,22,15,23,14,17,24,24,24,15,18,25,25,25,16,14,19,26,26,26,20,15,27,17,28,18,29,19,17,30,20,18,31,21,19,32,20,22,34,22,24,35,35,35,23,25,36,36,36,26,22,37,24,28,38,38,38,25,29,39,39,39,26,24,30,40,40,40,27,25,31,41,41,41,32,26,42,28,43,29,44,30,28,45,31,29,46,32,30,47,33,31,48,32,34,35,50,50,50,36,51,35,38,52,52,52,36,39,53,53,53,37,35,40,54,54,54,41,36,55,38,43,56,56,56,39,44,57,57,57,40,38,45,58,58,58,41,39,46,59,59,59,42,40,47,60,60,60,48,41,61,43,62,44,63,45,43,64,46,44,65,47,45,66,48,46,67,49,47,68,48;
    Aval << 1,1,-1,-0.6666666666666666,1.3333333333333333,1,1,1,-0.6666666666666666,1.6666666666666667,-1,0.26666666666666666,-0.5333333333333333,1,-1,-0.4,1.8,1,1.6,1,1,-0.4,1,-1.2,-2,-0.6666666666666666,1.8666666666666667,-1,0.11428571428571428,-0.5142857142857142,1,1.4,-1,0.34285714285714286,-0.45714285714285713,1,-1,-0.9333333333333333,-0.2857142857142857,2.2857142857142856,1,2.142857142857143,1,1.7142857142857142,-0.2857142857142857,1,1,-0.8571428571428571,1,-1.7142857142857142,2.3333333333333335,-2,0.26666666666666666,-0.5333333333333333,1,-2,-0.4,2.3142857142857145,-1,0.06349206349206349,-0.5079365079365079,1,2.057142857142857,-1,0.19047619047619047,-0.47619047619047616,1,1.2857142857142858,-0.5142857142857142,-1,0.38095238095238093,-0.38095238095238093,1,-1,-1.542857142857143,-0.2222222222222222,2.7777777777777777,1,2.6666666666666665,1,2.3333333333333335,-0.2222222222222222,1,1.7777777777777777,-0.6666666666666666,1,1,-1.3333333333333333,1,-2.2222222222222223,-3,-0.6666666666666666,2.4,-2,0.11428571428571428,-0.5142857142857142,1,1.8,-2,0.34285714285714286,-0.45714285714285713,1,-2,-1.2,-0.2857142857142857,2.7936507936507935,-1,0.04040404040404041,-0.5050505050505051,1,2.619047619047619,-1,0.12121212121212122,-0.48484848484848486,1,2.0952380952380953,-0.3492063492063492,-1,0.24242424242424243,-0.42424242424242425,1,1.2222222222222223,-1.0476190476190477,-1,0.40404040404040403,-0.32323232323232326,1,-1,-2.0952380952380953,-0.18181818181818182,3.272727272727273,1,3.1818181818181817,1,2.909090909090909,-0.18181818181818182,1,2.4545454545454546,-0.5454545454545454,1,1.8181818181818181,-1.0909090909090908,1,1,-1.8181818181818181,1,-2.727272727272727,3,-3,0.26666666666666666,-0.5333333333333333,1,-3,-0.4,2.8285714285714287,-2,0.06349206349206349,-0.5079365079365079,1,2.5142857142857142,-2,0.19047619047619047,-0.47619047619047616,1,1.5714285714285714,-0.6285714285714286,-2,0.38095238095238093,-0.38095238095238093,1,-2,-1.8857142857142857,-0.2222222222222222,3.282828282828283,-1,0.027972027972027972,-0.5034965034965035,1,3.1515151515151514,-1,0.08391608391608392,-0.48951048951048953,1,2.757575757575758,-0.26262626262626265,-1,0.16783216783216784,-0.44755244755244755,1,2.101010101010101,-0.7878787878787878,-1,0.27972027972027974,-0.3776223776223776,1,1.1818181818181819,-1.5757575757575757,-1,0.4195804195804196,-0.27972027972027974,1,-1,-2.6262626262626263,-0.15384615384615385,3.769230769230769,1,3.6923076923076925,1,3.4615384615384617,-0.15384615384615385,1,3.076923076923077,-0.46153846153846156,1,2.5384615384615383,-0.9230769230769231,1,1.8461538461538463,-1.5384615384615385,1,1,-2.3076923076923075,1,-3.230769230769231;
    
    Pi.resize(66); Pj.resize(66); Pval.resize(66,1);
    Pi << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69;
    Pj << 4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69;
    Pval << 1.,1.,1.,0.666666666666667,0.666666666666667,1.5,1.5,1.5,1.5,0.666666666666667,1.166666666666667,1.166666666666667,1.166666666666667,1.873131558847997,1.873131558847997,1.873131558847997,1.873131558847997,1.873131558847997,1.,1.,1.570360890770284,1.570360890770284,1.570360890770284,1.570360890770284,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,2.182828897119992,1.,1.34221653446217,1.34221653446217,1.34221653446217,1.910620894297899,1.910620894297899,1.910620894297899,1.910620894297899,1.910620894297899,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916,2.453229536334916,1.228144356308114,1.228144356308114,1.667019025796873,1.667019025796873,1.667019025796873,1.667019025796873,2.206589244499908,2.206589244499908,2.206589244499908,2.206589244499908,2.206589244499908,2.206589244499908,2.69640223725223,2.69640223725223,2.69640223725223,2.69640223725223,2.69640223725223,2.69640223725223,2.69640223725223,2.69640223725223;

    BCi.resize(396); BCj.resize(396); BCval.resize(396,1);
    BCi << 0,0,1,3,2,0,4,4,3,2,5,1,6,4,7,2,8,8,7,6,5,1,9,9,3,10,10,10,7,6,5,1,11,11,4,12,12,12,7,13,13,13,13,12,11,10,9,8,4,3,2,14,14,14,12,11,10,9,8,3,2,15,15,15,5,16,16,16,16,13,12,10,4,17,17,17,12,11,9,4,3,2,18,18,18,18,6,19,19,19,19,13,12,10,4,20,20,20,20,20,7,21,21,21,21,21,13,22,22,22,22,22,22,22,22,8,23,23,23,23,23,19,18,17,16,15,14,7,6,5,1,24,24,24,24,24,24,24,24,9,25,25,25,25,25,25,25,25,25,19,18,17,16,15,14,7,6,5,1,26,26,26,26,26,10,27,27,27,27,27,27,27,27,19,18,16,7,28,28,28,28,28,28,28,28,28,11,29,29,29,29,29,29,29,29,19,18,17,16,15,14,7,6,5,1,12,19,18,16,7,13,19,29,28,27,26,25,24,23,22,21,20,13,12,11,10,9,8,4,3,2,29,28,27,26,25,24,23,22,21,20,13,12,11,10,9,8,4,3,2,14,29,28,27,25,24,22,13,12,10,4,29,27,26,25,24,23,22,21,20,13,12,11,10,9,8,4,3,2,15,29,28,27,25,24,22,13,12,10,4,16,29,28,25,13,29,28,27,26,25,24,23,22,21,20,13,12,11,10,9,8,4,3,2,17,29,28,27,25,24,22,13,12,10,4,18,29,28,25,13,19,29,20,19,18,17,16,15,14,7,6,5,1,21,19,18,17,16,15,14,7,6,5,1,22,19,18,16,7,23,19,18,17,16,15,14,7,6,5,1,24,19,18,16,7,25,19,26,19,18,17,16,15,14,7,6,5,1,27,19,18,16,7,28,19,29;
    BCj << 0,1,2,3,3,3,4,3,4,4,2,5,2,6,2,7,4,3,8,8,8,8,4,3,9,6,4,3,10,10,10,10,4,3,11,6,4,3,12,13,6,4,3,13,13,13,13,13,13,13,13,10,8,2,14,14,14,14,14,14,14,10,8,2,15,12,10,8,2,16,16,16,16,10,8,2,17,17,17,17,17,17,12,10,8,2,18,12,10,8,2,19,19,19,19,17,14,13,4,3,20,17,14,13,4,3,21,19,17,16,14,13,6,4,3,22,17,14,13,4,3,23,23,23,23,23,23,23,23,23,23,19,17,16,14,13,6,4,3,24,21,19,17,16,14,13,6,4,3,25,25,25,25,25,25,25,25,25,25,17,14,13,4,3,26,19,17,16,14,13,6,4,3,27,27,27,27,21,19,17,16,14,13,6,4,3,28,21,19,17,16,13,6,4,3,29,29,29,29,29,29,29,29,29,29,30,31,31,31,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,40,40,40,40,40,40,40,40,40,40,41,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,45,45,45,45,45,45,45,45,45,45,46,47,47,47,47,48,49,50,51,51,51,51,51,51,51,51,51,51,52,53,53,53,53,53,53,53,53,53,53,54,55,55,55,55,56,57,57,57,57,57,57,57,57,57,57,58,59,59,59,59,60,61,62,63,63,63,63,63,63,63,63,63,63,64,65,65,65,65,66,67,68;
    BCval << -1,1,-1,-0.26666666666666666,-1.3333333333333333,0.6666666666666666,0.2,0.13333333333333333,-1.4,0.5,-0.5,1,0.5714285714285714,-1,-0.42857142857142855,1,0.5,-1.3333333333333333,0.2571428571428571,-0.34285714285714286,-1.1,0.2,-0.9,0.4,1,-0.5,0.2,-0.2,0.21428571428571427,-1.2857142857142858,0.25,-0.5,1.1428571428571428,0.5079365079365079,1,0.6666666666666666,-0.23809523809523808,-0.25396825396825395,-1,-0.0761904761904762,-0.6666666666666666,0.09523809523809523,0.19047619047619047,0.10158730158730159,-0.20317460317460317,0.2,-0.4,-1.3333333333333333,-0.02666666666666667,0.05333333333333334,0.26666666666666666,0.125,-1.05,-0.75,0.047619047619047616,-0.38095238095238093,0.12857142857142856,-1.3285714285714285,0.5,0.14285714285714285,-0.35714285714285715,-0.6428571428571429,0.4,0.8571428571428571,1,-0.5,0.10714285714285714,-0.3,-0.6428571428571429,0.2857142857142857,-0.2857142857142857,-1.0714285714285714,0.14285714285714285,1.2121212121212122,0.7272727272727273,-0.7272727272727273,0.05555555555555555,-1.4444444444444444,0.25,-0.03333333333333333,-0.43333333333333335,-0.08333333333333333,0.7272727272727273,-0.36363636363636365,-0.5454545454545454,0.5454545454545454,1,-0.9090909090909091,0.07575757575757576,0.45454545454545453,-0.45454545454545453,0.3333333333333333,-1.3333333333333333,0.25,-0.5,-0.0625,0.48214285714285715,-1.8,1.125,-3,1,0.175,-1.35,0.04,-1.65,1.4,-1,0.125,-0.025,-1.0357142857142858,0.15714285714285714,-0.02,-0.75,0.45,-0.7,1,-0.753968253968254,0.8163265306122449,0.5079365079365079,1.9047619047619047,0.25396825396825395,-0.09740259740259741,0.11688311688311688,-0.15584415584415584,0.26632653061224487,-0.3551020408163265,-1.1892857142857143,-0.018367346938775512,0.024489795918367346,0.17857142857142858,0.014285714285714285,-0.6666666666666666,0.04365079365079365,0.5238095238095238,-0.14625850340136054,-0.25396825396825395,1,-0.4523809523809524,-0.12698412698412698,1,-0.5,0.16666666666666666,-0.011904761904761904,-0.5238095238095238,0.04421768707482993,0.19047619047619047,-1,0.21428571428571427,0.09523809523809523,-0.025252525252525252,0.12121212121212122,-0.40404040404040403,0.2261904761904762,-1.3571428571428572,0.4583333333333333,-0.023809523809523808,0.14285714285714285,-0.4166666666666667,-0.05555555555555555,1.655011655011655,1.078921078921079,0.6713286713286714,-1.8461538461538463,-1.118881118881119,1,1.3986013986013985,-0.1282051282051282,0.7192807192807192,-0.1798201798201798,-0.3356643356643357,-1.006993006993007,0.4195804195804196,0.5594405594405595,0.30303030303030304,-0.24242424242424243,-1.0555555555555556,0.1111111111111111,0.7692307692307693,-0.6293706293706294,0.017482517482517484,-0.7192807192807192,0.04495504495504495,0.2517482517482518,1.006993006993007,-0.1888111888111888,-0.4195804195804196,1,-1.1538461538461537,0.15734265734265734,-0.005827505827505828,0.6743256743256744,-0.2097902097902098,-0.9440559440559441,0.1048951048951049,0.34965034965034963,0.01893939393939394,0.11363636363636363,-1.5151515151515151,0.026785714285714284,0.21428571428571427,0.03125,-0.05357142857142857,-0.42857142857142855,-0.0625,0.041666666666666664,1,0.45454545454545453,-1.3636363636363635,0.25,-0.5,1,-1,0.028305028305028304,-0.03396603396603397,0.04528804528804529,-0.09057609057609058,-0.07482993197278912,0.09977324263038549,-0.19954648526077098,0.21571428571428572,-0.43142857142857144,-1.4428571428571428,0.0027210884353741495,-0.0036281179138321997,0.0072562358276643995,-0.02,0.04,0.24761904761904763,-0.0019047619047619048,0.0038095238095238095,0.01904761904761905,0.004162504162504163,-0.012487512487512488,0.03663003663003663,-0.19314019314019315,-0.006235827664399093,0.0572562358276644,-0.40816326530612246,0.12261904761904761,-1.3821428571428571,0.6339285714285714,0.0022675736961451248,-0.005668934240362812,0.027210884353741496,-0.009523809523809525,0.15,-0.32142857142857145,0.0015873015873015873,0.004761904761904762,-0.03571428571428571,1,-0.11238761238761238,0.11988011988011989,-0.11988011988011989,0.29365079365079366,-0.29365079365079366,-1.1369047619047619,-0.015873015873015872,0.015873015873015872,0.13095238095238096,0.007936507936507936,-0.0023839796567069293,0.028607755880483154,-0.438652256834075,0.0021645021645021645,0.05519480519480519,-1.5043290043290043,0.014772727272727272,0.43636363636363634,0.05113636363636364,-0.0021645021645021645,-0.0021645021645021645,0.12554112554112554,-0.025,-0.38181818181818183,-0.09090909090909091,-0.004545454545454545,-0.03636363636363636,0.007575757575757576,1,-0.04291163382072473,0.17164653528289892,-0.3814367450731087,0.3484848484848485,-1.393939393939394,0.4659090909090909,-0.030303030303030304,0.12121212121212122,-0.4318181818181818,-0.045454545454545456,1,0.3146853146853147,-0.2097902097902098,-1.0454545454545454,0.09090909090909091,0.001456876456876457,0.0008741258741258741,0.030303030303030304,-1.634032634032634,0.002976190476190476,0.002976190476190476,0.20238095238095238,0.00625,0.01875,0.015625,-0.002380952380952381,-0.010714285714285714,-0.3952380952380952,-0.005,-0.0525,-0.0125,0.005,0.03166666666666667,0.0125,1,0.039335664335664336,0.1888111888111888,-1.5734265734265733,0.041666666666666664,0.20833333333333334,0.03125,-0.08333333333333333,-0.4166666666666667,-0.0625,0.041666666666666664,1,0.5769230769230769,-1.3846153846153846,0.25,-0.5,1,-1,1,0.004329004329004329,-0.005194805194805195,0.006926406926406926,-0.023809523809523808,0.031746031746031744,0.35,-0.0013605442176870747,0.0018140589569160999,0.04285714285714286,0.009523809523809525,1,0.0038261401897765534,-0.010101010101010102,0.028160391796755432,-0.08982683982683982,0.3318903318903319,-0.8118686868686869,-0.010822510822510822,0.03463203463203463,-0.15404040404040403,-0.045454545454545456,1,-0.018365472910927456,0.014692378328741965,0.21212121212121213,0.020202020202020204,1,-0.004856254856254856,-0.03613053613053613,0.3139083139083139,-0.0673076923076923,-0.8333333333333334,-0.1233974358974359,-0.008241758241758242,-0.14285714285714285,0.08012820512820513,0.057692307692307696,1,-0.13986013986013987,0.26573426573426573,-0.9230769230769231,-0.15384615384615385,1,0.15384615384615385,1,-0.011363636363636364,-0.031818181818181815,-0.8363636363636363,-0.01607142857142857,-0.06190476190476191,-0.01875,0.03214285714285714,0.12380952380952381,0.0375,-0.025,1,-0.15151515151515152,-0.8787878787878788,-0.08333333333333333,0.16666666666666666,1,-1,1;

    OddVar.resize(nBC);
    OddVar << 1,5,7,9,11,15,18,20,22,24,26,28,30,32,36,39,41,44,46,48,50,52,54,56,58,60,62,64,66,68;
    TensorDegree.resize(20);
    TensorDegree << 0,1,0,2,1,3,0,2,4,1,3,5,0,2,4,6,1,3,5,7; 
    break;
  default:
    cout << " moment theory not available\n";
    exit(0);
  };
  
  SpInit( nEqn, nEqn, Ai, Aj, Aval, Ax );
  SpInit( nEqn, nEqn, Pi, Pj, Pval, P );
  SpInit( nBC, nEqn, BCi, BCj, BCval, BC );
};

// generates the projector of normal coordinates 
SpMatrix System::Projector( const MatrixXd& normal )
{
  double nx = normal(0), ny = normal(1);
  int idx;
  MatrixXd P[8];
  P[0].resize(1,1);
  P[0] << 1.0;
  P[1].resize(2,2);
  P[1] << nx, ny, -ny, nx;
  P[2].resize(3,3);
  double n20 = nx*nx, n02 = ny*ny, n11 = nx*ny;
  P[2] << n20,2*n11,n02,-n11,-n02 + n20,n11,n02,-2*n11,n20;
  P[3].resize(4,4);
  double n30 = nx*n20, n21 = ny*n20, n12 = ny*n11, n03 = ny*n02;
  P[3] << n30,3*n21,3*n12,n03,-n21,-2*n12+n30,-n03+2*n21,n12,n12,n03-2*n21,-2*n12+n30,n21,-n03,3*n12,-3*n21,n30;
  P[4].resize(5,5);
  double n40 = nx*n30, n31 = ny*n30, n22 = nx*n12, n13 = nx*n03, n04 = ny*n03;
  P[4] << n40,4*n31,6*n22,4*n13,n04,-n31,-3*n22+n40,-3*n13+3*n31,-n04+3*n22,n13,n22,2*n13-2*n31,n04-4*n22+n40,-2*n13+2*n31,n22,-n13,-n04+3*n22,3*n13-3*n31,-3*n22+n40,n31,n04,-4*n13,6*n22,-4*n31,n40;
  P[5].resize(6,6);
  double n50 = nx*n40, n41 = ny*n40, n32 = nx*n22, n23 = nx*n13, n14 = ny*n13, n05 = ny*n04;
  P[5] << n50,5*n41,10*n32,10*n23,5*n14,n05,-n41,-4*n32+n50,-6*n23+4*n41,-4*n14+6*n32,-n05+4*n23,n14,n32,3*n23-2*n41,3*n14-6*n32+n50,n05-6*n23+3*n41,-2*n14+3*n32,n23,-n23,-2*n14+3*n32,-n05+6*n23-3*n41,3*n14-6*n32+n50,-3*n23+2*n41,n32,n14,n05-4*n23,-4*n14+6*n32,6*n23-4*n41,-4*n32+n50,n41,-n05,5*n14,-10*n23,10*n32,-5*n41,n50;
  P[6].resize(7,7);
  double n60 = nx*n50, n51 = ny*n50, n42 = nx*n32, n33 = nx*n23, n24 = ny*n23, n15 = ny*n14, n06 = ny*n05;
  P[6] << n60,6*n51,15*n42,20*n33,15*n24,6*n15,n06,-n51,-5*n42 + n60,-10*n33 + 5*n51,-10*n24 + 10*n42,-5*n15 + 10*n33,-n06 + 5*n24,n15,n42,4*n33 - 2*n51,6*n24 - 8*n42 + n60,4*n15 - 12*n33 + 4*n51,n06 - 8*n24 + 6*n42,-2*n15 + 4*n33,n24,-n33,-3*n24 + 3*n42,-3*n15 + 9*n33 - 3*n51,-n06 + 9*n24 - 9*n42 + n60,3*n15 - 9*n33 + 3*n51,-3*n24 + 3*n42,n33,n24,2*n15 - 4*n33,n06 - 8*n24 + 6*n42,-4*n15 + 12*n33 - 4*n51,6*n24 - 8*n42 + n60,-4*n33 + 2*n51,n42,-n15,-n06 + 5*n24,5*n15 - 10*n33,-10*n24 + 10*n42,10*n33 - 5*n51,-5*n42 + n60,n51,n06,-6*n15,15*n24,-20*n33,15*n42,-6*n51,n60;
  P[7].resize(8,8);
  double n70 = nx*n60, n61 = ny*n60, n52 = nx*n42, n43 = nx*n33, n34 = ny*n33, n25 = ny*n24, n16 = ny*n15, n07 = ny*n06;
  P[7] << n70,7*n61,21*n52,35*n43,35*n34,21*n25,7*n16,n07,-n61,-6*n52 + n70,-15*n43 + 6*n61,-20*n34 + 15*n52,-15*n25 + 20*n43,-6*n16 + 15*n34,-n07 + 6*n25,n16,n52,5*n43 - 2*n61,10*n34 - 10*n52 + n70,10*n25 - 20*n43 + 5*n61,5*n16 - 20*n34 + 10*n52,n07 - 10*n25 + 10*n43,-2*n16 + 5*n34,n25,-n43,-4*n34 + 3*n52,-6*n25 + 12*n43 - 3*n61,-4*n16 + 18*n34 - 12*n52 + n70,-n07 + 12*n25 - 18*n43 + 4*n61,3*n16 - 12*n34 + 6*n52,-3*n25 + 4*n43,n34,n34,3*n25 - 4*n43,3*n16 - 12*n34 + 6*n52,n07 - 12*n25 + 18*n43 - 4*n61,-4*n16 + 18*n34 - 12*n52 + n70,6*n25 - 12*n43 + 3*n61,-4*n34 + 3*n52,n43,-n25,-2*n16 + 5*n34,-n07 + 10*n25 - 10*n43,5*n16 - 20*n34 + 10*n52,-10*n25 + 20*n43 - 5*n61,10*n34 - 10*n52 + n70,-5*n43 + 2*n61,n52,n16,n07 - 6*n25,-6*n16 + 15*n34,15*n25 - 20*n43,-20*n34 + 15*n52,15*n43 - 6*n61,-6*n52 + n70,n61,-n07,7*n16,-21*n25,35*n34,-35*n43,21*n52,-7*n61,n70;
  
  SpMatrix T(nEqn,nEqn);
  VectorXi ColSize(nEqn);
  int ix = 0;
  for( int i=0; i<TensorDegree.size(); i++ ) 
    for( int j=0; j<TensorDegree(i)+1; j++ )
      ColSize(ix++) = TensorDegree(i)+1;
      
  T.reserve(ColSize);
  ix = 0;
  for( int i=0; i<TensorDegree.size(); i++ ) {
    SpBlock( ix, P[TensorDegree(i)], T );
    ix += TensorDegree(i)+1;
  };
  
  T.makeCompressed();
  return( T );
};

// defines the inverse projector
SpMatrix System::invProjector( const MatrixXd& normal )
{
  MatrixXd mirrow(3,1);
  mirrow << normal(0,0),-normal(1,0),0;
  return( Projector( mirrow ) );
};

