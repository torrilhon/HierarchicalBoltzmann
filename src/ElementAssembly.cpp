/*************************************************************************\
 ElementAssembly.cpp  - provides element assemblation matrices. These
                        use precomputed formulas (only P1/P2 and Q1/Q2).
\*************************************************************************/
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <math.h>
using namespace std;

#include "EigenSetup.h"
#include "Mesh.h"
#include "System.h"
#include "Numerics.h"


// element matrix: derivative in x-direction
MatrixXd Numerics::AssembleDiffX( const MatrixXd& pos, int order, int type )
{
  MatrixXd mat;
  double dx1, dy1, dx2, dy2, dx3, dy3;
  
  dx1 = pos(0,1)-pos(0,0);
  dy1 = pos(1,1)-pos(1,0);
  dx2 = pos(0,2)-pos(0,0);
  dy2 = pos(1,2)-pos(1,0);
  
  if( type == 3 ) {
    if( order == 2 ) {
      mat.resize(6,6);
      mat << dy1/15. - dy2/15.,-dy1/30. + dy2/30.,-dy1/30. + dy2/30.,dy1/10. - dy2/10.,-dy1/30. + dy2/30.,dy1/10. - dy2/10.,-dy2/30.,dy2/15.,-dy2/30.,dy2/10.,dy2/10.,-dy2/30.,dy1/30.,dy1/30.,-dy1/15.,dy1/30.,-dy1/10.,-dy1/10.,-dy1/30. + dy2/10.,dy1/15. - dy2/10.,-dy1/30.,(4*dy1)/15.,(4*dy1)/15. - (2*dy2)/15.,(2*dy1)/15. + (2*dy2)/15.,dy1/30. - dy2/30.,-dy1/15. - dy2/30.,dy1/30. + dy2/15.,(-4*dy1)/15. + (2*dy2)/15.,(-4*dy1)/15. + (4*dy2)/15.,(-2*dy1)/15. + (4*dy2)/15.,-dy1/10. + dy2/30.,dy2/30.,dy1/10. - dy2/15.,(-2*dy1)/15. - (2*dy2)/15.,(2*dy1)/15. - (4*dy2)/15.,(-4*dy2)/15.;
    };  
    if( order == 1 ) {
      mat.resize(3,3);
      mat << dy1/6. - dy2/6.,dy1/6. - dy2/6.,dy1/6. - dy2/6.,dy2/6.,dy2/6.,dy2/6.,-dy1/6.,-dy1/6.,-dy1/6.;  
    };  
  };
  if( type == 4 ) {
    dx3 = pos(0,3)-pos(0,0);
    dy3 = pos(1,3)-pos(1,0);
    
    if( order == 2 ) {
      mat.resize(9,9);
      mat << dy1/15. - dy3/15.,-dy1/36. + dy2/90. + dy3/90.,dy1/180. - dy3/180.,-dy1/90. - dy2/90. + dy3/36.,dy1/18. - dy2/45. - dy3/15.,-dy1/45. + dy3/90.,-dy1/90. + dy3/45.,dy1/15. + dy2/45. - dy3/18.,(2*dy1)/45. - (2*dy3)/45.,-dy1/180. - dy2/90. - dy3/90.,dy2/15.,dy1/180. - dy2/36. + dy3/90.,dy2/180.,-dy1/30. + dy2/15. + dy3/45.,dy1/30. + dy2/18. - dy3/45.,dy1/90. - dy2/45.,-dy1/90. - dy2/90.,(2*dy2)/45.,-dy1/180. + dy3/180.,dy1/36. - dy2/180. - dy3/90.,-dy1/15. + dy3/15.,dy1/90. + dy2/180. - dy3/36., dy1/45. - dy2/90. - dy3/90.,-dy1/18. - dy2/30. + dy3/15.,-dy1/15. + dy2/30. + dy3/18.,dy1/90. + dy2/90. - dy3/45.,(-2*dy1)/45. + (2*dy3)/45.,dy1/90. + dy2/90. + dy3/180., -dy2/180.,-dy1/90. + dy2/36. - dy3/180.,-dy2/15.,dy2/90. + dy3/90.,dy2/45. - dy3/90.,dy1/45. - dy2/18. - dy3/30.,-dy1/45. - dy2/15. + dy3/30.,(-2*dy2)/45., dy1/90. + dy2/45. + dy3/15.,dy1/10. - dy2/15. - dy3/45.,-dy1/45. + dy2/90. + dy3/90.,-dy2/90. - dy3/90.,(4*dy1)/15.,dy1/15. - dy2/45. - dy3/45., (-2*dy1)/45. - (2*dy2)/45. + (2*dy3)/45.,dy1/45. + dy2/45. + dy3/45.,(4*dy1)/15. + (4*dy2)/45. - (4*dy3)/45.,dy1/45. - dy3/90.,-dy1/10. + dy2/90. + dy3/45., -dy1/90. + dy2/10. - dy3/15.,-dy2/45. + dy3/90.,-dy1/15. + dy2/45. + dy3/45.,(-4*dy1)/15. + (4*dy2)/15.,-dy1/45. + dy2/15. - dy3/45.,(2*dy1)/45. - (2*dy2)/45. - (2*dy3)/45., (-4*dy1)/15. + (4*dy2)/15. + (4*dy3)/45.,dy1/90. - dy3/45.,-dy1/90. + dy2/45.,dy1/15. - dy2/10. + dy3/90.,-dy1/45. - dy2/90. + dy3/10.,(2*dy1)/45. + (2*dy2)/45. - (2*dy3)/45., dy1/45. - dy2/15. + dy3/45.,(-4*dy2)/15. + (4*dy3)/15.,-dy1/45. - dy2/45. + dy3/15.,(-4*dy1)/45. - (4*dy2)/15. + (4*dy3)/15.,-dy1/15. - dy2/45. - dy3/90.,dy1/90. + dy2/90., -dy1/90. - dy2/90. + dy3/45.,dy1/45. + dy2/15. - dy3/10.,-dy1/45. - dy2/45. - dy3/45.,(-2*dy1)/45. + (2*dy2)/45. + (2*dy3)/45.,dy1/45. + dy2/45. - dy3/15.,(-4*dy3)/15., (4*dy1)/45. - (4*dy2)/45. - (4*dy3)/15.,(-2*dy1)/45. + (2*dy3)/45.,(-2*dy2)/45.,(2*dy1)/45. - (2*dy3)/45.,(2*dy2)/45.,(-4*dy1)/15. - (4*dy2)/45. + (4*dy3)/45., (4*dy1)/15. - (4*dy2)/15. - (4*dy3)/45.,(4*dy1)/45. + (4*dy2)/15. - (4*dy3)/15.,(-4*dy1)/45. + (4*dy2)/45. + (4*dy3)/15.,0;
    };  
    if( order == 1 ) {
      mat.resize(4,4);
      mat << dy1/6. - dy3/6.,dy1/6. - dy2/12. - dy3/12.,dy1/12. - dy3/12.,dy1/12. + dy2/12. - dy3/6.,dy2/12. + dy3/12.,dy2/6.,dy2/6. - dy3/12.,dy2/12.,-dy1/12. + dy3/12.,-dy1/6. + dy3/12., -dy1/6. + dy3/6.,-dy1/12. + dy3/6.,-dy1/12. - dy2/12.,-dy2/12.,dy1/12. - dy2/6.,-dy2/6.; 
    };  
  };
  
  mat.transposeInPlace();
  return( mat );
};

// element matrix: derivative in y-direction
MatrixXd Numerics::AssembleDiffY( const MatrixXd& pos, int order, int type )
{
  MatrixXd mat;
  double dx1, dy1, dx2, dy2, dx3, dy3;
  
  dx1 = pos(0,1)-pos(0,0);
  dy1 = pos(1,1)-pos(1,0);
  dx2 = pos(0,2)-pos(0,0);
  dy2 = pos(1,2)-pos(1,0);
  
  if( type == 3 ) {
    if( order == 2 ) {
      mat.resize(6,6);
      mat << -dx1/15. + dx2/15.,dx1/30. - dx2/30.,dx1/30. - dx2/30.,-dx1/10. + dx2/10.,dx1/30. - dx2/30.,-dx1/10. + dx2/10.,dx2/30.,-dx2/15.,dx2/30.,-dx2/10.,-dx2/10.,dx2/30.,-dx1/30., -dx1/30.,dx1/15.,-dx1/30.,dx1/10.,dx1/10.,dx1/30. - dx2/10.,-dx1/15. + dx2/10.,dx1/30.,(-4*dx1)/15.,(-4*dx1)/15. + (2*dx2)/15.,(-2*dx1)/15. - (2*dx2)/15.,-dx1/30. + dx2/30., dx1/15. + dx2/30.,-dx1/30. - dx2/15.,(4*dx1)/15. - (2*dx2)/15.,(4*dx1)/15. - (4*dx2)/15.,(2*dx1)/15. - (4*dx2)/15.,dx1/10. - dx2/30.,-dx2/30.,-dx1/10. + dx2/15., (2*dx1)/15. + (2*dx2)/15.,(-2*dx1)/15. + (4*dx2)/15.,(4*dx2)/15.;  
    };
    if( order == 1 ) {
      mat.resize(3,3);
      mat << -dx1/6. + dx2/6.,-dx1/6. + dx2/6.,-dx1/6. + dx2/6.,-dx2/6.,-dx2/6.,-dx2/6.,dx1/6.,dx1/6.,dx1/6.;  
    };  
  };  
  if( type == 4 ) {
    dx3 = pos(0,3)-pos(0,0);
    dy3 = pos(1,3)-pos(1,0);
    
    if( order == 2 ) {
      mat.resize(9,9);
      mat << -dx1/15. + dx3/15.,dx1/36. - dx2/90. - dx3/90.,-dx1/180. + dx3/180.,dx1/90. + dx2/90. - dx3/36.,-dx1/18. + dx2/45. + dx3/15.,dx1/45. - dx3/90.,dx1/90. - dx3/45., -dx1/15. - dx2/45. + dx3/18.,(-2*dx1)/45. + (2*dx3)/45.,dx1/180. + dx2/90. + dx3/90.,-dx2/15.,-dx1/180. + dx2/36. - dx3/90.,-dx2/180.,dx1/30. - dx2/15. - dx3/45., -dx1/30. - dx2/18. + dx3/45.,-dx1/90. + dx2/45.,dx1/90. + dx2/90.,(-2*dx2)/45.,dx1/180. - dx3/180.,-dx1/36. + dx2/180. + dx3/90.,dx1/15. - dx3/15.,-dx1/90. - dx2/180. + dx3/36., -dx1/45. + dx2/90. + dx3/90.,dx1/18. + dx2/30. - dx3/15.,dx1/15. - dx2/30. - dx3/18.,-dx1/90. - dx2/90. + dx3/45.,(2*dx1)/45. - (2*dx3)/45.,-dx1/90. - dx2/90. - dx3/180., dx2/180.,dx1/90. - dx2/36. + dx3/180.,dx2/15.,-dx2/90. - dx3/90.,-dx2/45. + dx3/90.,-dx1/45. + dx2/18. + dx3/30.,dx1/45. + dx2/15. - dx3/30.,(2*dx2)/45., -dx1/90. - dx2/45. - dx3/15.,-dx1/10. + dx2/15. + dx3/45.,dx1/45. - dx2/90. - dx3/90.,dx2/90. + dx3/90.,(-4*dx1)/15.,-dx1/15. + dx2/45. + dx3/45., (2*dx1)/45. + (2*dx2)/45. - (2*dx3)/45.,-dx1/45. - dx2/45. - dx3/45.,(-4*dx1)/15. - (4*dx2)/45. + (4*dx3)/45.,-dx1/45. + dx3/90.,dx1/10. - dx2/90. - dx3/45., dx1/90. - dx2/10. + dx3/15.,dx2/45. - dx3/90.,dx1/15. - dx2/45. - dx3/45.,(4*dx1)/15. - (4*dx2)/15.,dx1/45. - dx2/15. + dx3/45.,(-2*dx1)/45. + (2*dx2)/45. + (2*dx3)/45., (4*dx1)/15. - (4*dx2)/15. - (4*dx3)/45.,-dx1/90. + dx3/45.,dx1/90. - dx2/45.,-dx1/15. + dx2/10. - dx3/90.,dx1/45. + dx2/90. - dx3/10.,(-2*dx1)/45. - (2*dx2)/45. + (2*dx3)/45., -dx1/45. + dx2/15. - dx3/45.,(4*dx2)/15. - (4*dx3)/15.,dx1/45. + dx2/45. - dx3/15.,(4*dx1)/45. + (4*dx2)/15. - (4*dx3)/15.,dx1/15. + dx2/45. + dx3/90.,-dx1/90. - dx2/90., dx1/90. + dx2/90. - dx3/45.,-dx1/45. - dx2/15. + dx3/10.,dx1/45. + dx2/45. + dx3/45.,(2*dx1)/45. - (2*dx2)/45. - (2*dx3)/45.,-dx1/45. - dx2/45. + dx3/15.,(4*dx3)/15., (-4*dx1)/45. + (4*dx2)/45. + (4*dx3)/15.,(2*dx1)/45. - (2*dx3)/45.,(2*dx2)/45.,(-2*dx1)/45. + (2*dx3)/45.,(-2*dx2)/45.,(4*dx1)/15. + (4*dx2)/45. - (4*dx3)/45., (-4*dx1)/15. + (4*dx2)/15. + (4*dx3)/45.,(-4*dx1)/45. - (4*dx2)/15. + (4*dx3)/15.,(4*dx1)/45. - (4*dx2)/45. - (4*dx3)/15.,0;
    };  
    if( order == 1 ) {
      mat.resize(4,4);
      mat << -dx1/6. + dx3/6.,-dx1/6. + dx2/12. + dx3/12.,-dx1/12. + dx3/12.,-dx1/12. - dx2/12. + dx3/6.,-dx2/12. - dx3/12.,-dx2/6.,-dx2/6. + dx3/12.,-dx2/12.,dx1/12. - dx3/12., dx1/6. - dx3/12.,dx1/6. - dx3/6.,dx1/12. - dx3/6.,dx1/12. + dx2/12.,dx2/12.,-dx1/12. + dx2/6.,dx2/6.; 
    };  
  };
  
  mat.transposeInPlace();
  return( mat );
};

// element matrix: mass matrix
MatrixXd Numerics::AssembleMass( const MatrixXd& pos, int order, int type )
{
  MatrixXd mat;
  double dx1, dy1, dx2, dy2, dx3, dy3, det, a0, a1, a2;
  
  dx1 = pos(0,1)-pos(0,0);
  dy1 = pos(1,1)-pos(1,0);
  dx2 = pos(0,2)-pos(0,0);
  dy2 = pos(1,2)-pos(1,0);
  
  if( type == 3 ) {
    det = dx1*dy2-dx2*dy1;
    
    if( order == 2 ) { 
      mat.resize(6,6);
      mat << 1./60, -1./360, -1./360,   0, -1./90,  0, -1./360, 1./60, -1./360,   0,   0, -1./90, -1./360, -1./360, 1./60,-1./90,  0,  0,  0,   0,    -1./90, 4./45, 2./45, 2./45, -1./90, 0,      0,   2./45, 4./45, 2./45, 0, -1./90,    0,   2./45, 2./45, 4./45;
      mat = mat*det;
    }; 
    if( order == 1 ) { 
      mat.resize(3,3);
      mat << 1./12, 1./24, 1./24, 1./24, 1./12, 1./24, 1./24, 1./24, 1./12;
      mat = mat*det;
    }; 
  };
  if( type == 4 ) {
    dx3 = pos(0,3)-pos(0,0);
    dy3 = pos(1,3)-pos(1,0);
    a0 = ((dx1 - dx3)*dy2 + dx2*(-dy1 + dy3))/8.;
    a1 = (-(dx2*dy1) + dx3*dy1 + dx1*(dy2 - dy3))/8.;
    a2 = (dx3*(dy1 - dy2) + (-dx1 + dx2)*dy3)/8.;
     
    if( order == 2 ) {
      mat.resize(9,9);
      mat << (16*a0)/225. - (4*a1)/75. - (4*a2)/75.,(-4*a0)/225. + a2/75.,a0/225.,(-4*a0)/225. + a1/75.,(8*a0)/225. - (8*a1)/225. - (2*a2)/75.,(-2*a0)/225. + (2*a2)/225., (-2*a0)/225. + (2*a1)/225.,(8*a0)/225. - (2*a1)/75. - (8*a2)/225.,(4*a0)/225. - (4*a1)/225. - (4*a2)/225.,(-4*a0)/225. + a2/75.,(16*a0)/225. + (4*a1)/75. - (4*a2)/75., (-4*a0)/225. - a1/75.,a0/225.,(8*a0)/225. + (8*a1)/225. - (2*a2)/75.,(8*a0)/225. + (2*a1)/75. - (8*a2)/225.,(-2*a0)/225. - (2*a1)/225.,(-2*a0)/225. + (2*a2)/225., (4*a0)/225. + (4*a1)/225. - (4*a2)/225.,a0/225.,(-4*a0)/225. - a1/75.,(16*a0)/225. + (4*a1)/75. + (4*a2)/75.,(-4*a0)/225. - a2/75.,(-2*a0)/225. - (2*a1)/225., (8*a0)/225. + (2*a1)/75. + (8*a2)/225.,(8*a0)/225. + (8*a1)/225. + (2*a2)/75.,(-2*a0)/225. - (2*a2)/225.,(4*a0)/225. + (4*a1)/225. + (4*a2)/225.,(-4*a0)/225. + a1/75.,a0/225., (-4*a0)/225. - a2/75.,(16*a0)/225. - (4*a1)/75. + (4*a2)/75.,(-2*a0)/225. + (2*a1)/225.,(-2*a0)/225. - (2*a2)/225.,(8*a0)/225. - (8*a1)/225. + (2*a2)/75., (8*a0)/225. - (2*a1)/75. + (8*a2)/225.,(4*a0)/225. - (4*a1)/225. + (4*a2)/225.,(8*a0)/225. - (8*a1)/225. - (2*a2)/75.,(8*a0)/225. + (8*a1)/225. - (2*a2)/75., (-2*a0)/225. - (2*a1)/225.,(-2*a0)/225. + (2*a1)/225.,(64*a0)/225. - (16*a2)/75.,(4*a0)/225. + (4*a1)/225. - (4*a2)/225.,(-16*a0)/225.,(4*a0)/225. - (4*a1)/225. - (4*a2)/225., (32*a0)/225. - (32*a2)/225.,(-2*a0)/225. + (2*a2)/225.,(8*a0)/225. + (2*a1)/75. - (8*a2)/225.,(8*a0)/225. + (2*a1)/75. + (8*a2)/225.,(-2*a0)/225. - (2*a2)/225., (4*a0)/225. + (4*a1)/225. - (4*a2)/225.,(64*a0)/225. + (16*a1)/75.,(4*a0)/225. + (4*a1)/225. + (4*a2)/225.,(-16*a0)/225.,(32*a0)/225. + (32*a1)/225.,(-2*a0)/225. + (2*a1)/225., (-2*a0)/225. - (2*a1)/225.,(8*a0)/225. + (8*a1)/225. + (2*a2)/75.,(8*a0)/225. - (8*a1)/225. + (2*a2)/75.,(-16*a0)/225.,(4*a0)/225. + (4*a1)/225. + (4*a2)/225., (64*a0)/225. + (16*a2)/75.,(4*a0)/225. - (4*a1)/225. + (4*a2)/225.,(32*a0)/225. + (32*a2)/225.,(8*a0)/225. - (2*a1)/75. - (8*a2)/225.,(-2*a0)/225. + (2*a2)/225., (-2*a0)/225. - (2*a2)/225.,(8*a0)/225. - (2*a1)/75. + (8*a2)/225.,(4*a0)/225. - (4*a1)/225. - (4*a2)/225.,(-16*a0)/225.,(4*a0)/225. - (4*a1)/225. + (4*a2)/225., (64*a0)/225. - (16*a1)/75.,(32*a0)/225. - (32*a1)/225.,(4*a0)/225. - (4*a1)/225. - (4*a2)/225.,(4*a0)/225. + (4*a1)/225. - (4*a2)/225.,(4*a0)/225. + (4*a1)/225. + (4*a2)/225., (4*a0)/225. - (4*a1)/225. + (4*a2)/225.,(32*a0)/225. - (32*a2)/225.,(32*a0)/225. + (32*a1)/225.,(32*a0)/225. + (32*a2)/225.,(32*a0)/225. - (32*a1)/225.,(256*a0)/225.; 
    };  
    if( order == 1 ) {
      mat.resize(4,4);
      mat << (4*a0)/9. - (2*a1)/9. - (2*a2)/9.,(2*a0)/9. - a2/9.,a0/9.,(2*a0)/9. - a1/9.,(2*a0)/9. - a2/9.,(4*a0)/9. + (2*a1)/9. - (2*a2)/9.,(2*a0)/9. + a1/9.,a0/9.,a0/9.,(2*a0)/9. + a1/9., (4*a0)/9. + (2*a1)/9. + (2*a2)/9.,(2*a0)/9. + a2/9.,(2*a0)/9. - a1/9.,a0/9.,(2*a0)/9. + a2/9.,(4*a0)/9. - (2*a1)/9. + (2*a2)/9.; 
    };  
  };
  
  return( mat );
};

// element matrix: edge mass matrix
MatrixXd Numerics::AssembleMassE( const MatrixXd& pos, int order )
{
  MatrixXd mat;
  double dx1 = pos(0,1)-pos(0,0);
  double dy1 = pos(1,1)-pos(1,0);
  double ds = sqrt(dx1*dx1+dy1*dy1);
  
  if( order == 2 ) {
    mat.resize(3,3);
    mat << 2./15, -1./30, 1./15, -1./30, 2./15, 1./15, 1./15, 1./15, 8./15;
    mat = mat*ds;
  }; 
  if( order == 1 ) {
    mat.resize(2,2);
    mat << 1./3, 1./6, 1./6, 1./3;
    mat = mat*ds;
  }; 
  
  return( mat );
};

// generate Lagrange positions from vertex points
void Numerics::LagrangePts( MatrixXd& Pts, int order, int type )
{
  if( type == 3 ) {
    if( order == 2 ) {
      Pts.col(3) = 0.5*(Pts.col(0)+Pts.col(1));
      Pts.col(4) = 0.5*(Pts.col(1)+Pts.col(2));
      Pts.col(5) = 0.5*(Pts.col(2)+Pts.col(0));    
    };
    if( order ==1 ) {
      // only vertex points 
    };
  };
  if( type == 4 ) {
    if( order == 2 ) {
      Pts.col(4) = 0.5*(Pts.col(0)+Pts.col(1));
      Pts.col(5) = 0.5*(Pts.col(1)+Pts.col(2));
      Pts.col(6) = 0.5*(Pts.col(2)+Pts.col(3)); 
      Pts.col(7) = 0.5*(Pts.col(3)+Pts.col(0));
      Pts.col(8) = 0.5*(Pts.col(4)+Pts.col(6));
    };
    if( order ==1 ) {
      // only vertex points 
    };
  };
  
};

